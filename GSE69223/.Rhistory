library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
### load the CEL files
celFilesDirectory="GSE69223"
cels_GSE = list.files(celFilesDirectory, pattern = "CEL")
cels_GSE
affyData <- ReadAffy(celfile.path=celFilesDirectory)
affyData
# explore data
class(affyData)
sampleNames(affyData)
featureNames(affyData)
head(featureNames(affyData))
annotation(affyData)
dim(affyData)
# see how the RAW expression look like without processing : notice the large values
head(exprs(affyData))
#another way to explore expressions in the first 3 genes/probes in the first 5 columns
exprs(affyData)[1:3, 1:5]
# Exploratory analysis  1- histogram
cols=seq(1:length(sampleNames(affyData)))
hist(affyData,main = "Histogram GSE69223(Raw data)",col=cols)
legend(12,0.9, sampleNames(affyData),col=cols,lty=1, lwd=2,cex=0.5)
# Exploratory analysis  2- box plots
boxplot(affyData,main = "Box Plot GSE69223(Raw data)",col=seq(1:23))
#data pre-processing in one step : life is so easy !
# threestep (background correction, normalization, summarization from probes to probesets)
# Notice: all expression measures returned by threestep are all in the log2***scale.
eset = threestep(affyData,
background.method = "IdealMM",
normalize.method = "quantile",
summary.method = "median.polish")
# Exploratory analysis  1- histogram
cols=seq(1:length(sampleNames(eset)))
hist(eset,main = "Histogram GSE69223(Processed data)",col=cols)
legend(12,0.9, sampleNames(eset),col=cols,lty=1, lwd=2,cex=0.5)
# Exploratory analysis  2- box plots
boxplot(eset,main = "Box Plot GSE69223(Processed data)",col=seq(1:23))
# export the expression data to a text file
write.exprs(eset,file="expData.processed.txt")
#----------------------------------------------------------------------
## load already processed data
procdata <- read_delim("expData.processed.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
names(procdata)
names(procdata)[1]="probe_id" # to rename the first col to prob_id
names(procdata)
#### mapping the probe ids into gene symbole
#### First of all, you should know what the data annotation is by annotation()
annotation(affyData)
mapper = hgu133plus2SYMBOL
mapper
map.df = as.data.frame(mapper)
head(map.df)
# merge the two data frames to have the symbole annotation in the data object
procdata2=merge(procdata,map.df,by="probe_id",all.x=T)
head(procdata2)
# do i need the probe id again?  no, then let's drop it
procdata2=procdata2[,-1]
# remove nulls : some probes were not mapped to any gene symbol
procdata2=procdata2[ ! is.na(procdata2$symbol),]
# check duplciation of of gene symbols?
x=duplicated(procdata2$symbol)
sum(x)
### yes .. why ? probesets?  solutions : aggregation
exp.data=procdata2[-dim(procdata2)[2]]
exp.data=apply(exp.data,2, as.numeric)
####remove duplication
exp.data.agg= aggregate(exp.data, list(procdata2$symbol),FUN=mean)
names(exp.data.agg)
rownames(exp.data.agg)=exp.data.agg$Group.1
exp.data.agg=exp.data.agg[- 1]
#save the object in a RDATA file
save(exp.data.agg,file="Annotated_processed.RDATA")
write.table(exp.data.agg,file = "Annotated_processed.txt",row.names = T,col.names = T,quote = F)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- sampleNames(affyData)
# reordering the data
ctrlnamess <- c("GSM1695584", "GSM1695586", "GSM1695588", "GSM1695590",
"GSM1695592", "GSM1695594","GSM1695596", "GSM1695598",
"GSM1695600","GSM1695602", "GSM1695604", "GSM1695606",
"GSM1695608", "GSM1695610", "GSM1695612")
length(ctrlnamess )
casenamess <- c("GSM1695583", "GSM1695585", "GSM1695587", "GSM1695589",
"GSM1695591", "GSM1695593", "GSM1695595", "GSM1695597",
"GSM1695599","GSM1695601", "GSM1695603", "GSM1695605",
"GSM1695607", "GSM1695609", "GSM1695611")
length(casenamess  )
cotrl_data <- exp.data.agg %>% select(ctrlnamess)
names(exp.data.agg)
# reordering the data
ctrlnamess <- c("GSM1695584_K255_PN.CEL", "GSM1695586_K360_PN.CEL", "GSM1695588_K400_PN.CEL",
"GSM1695590_K516_PN.CEL", "GSM1695592_K519_PN.CEL", "GSM1695594_K643_PN.CEL",
"GSM1695596_K661_PN.CEL", "GSM1695598_K796_PN.CEL", "GSM1695600_K815_PN.CEL",
"GSM1695602_K972_PN.CEL", "GSM1695604_L042_PN.CEL", "GSM1695606_L083_PN.CEL",
"GSM1695608_L128_PN.CEL", "GSM1695610_L184_PN.CEL", "GSM1695612_L187_PN.CEL")
cotrl_data <- exp.data.agg %>% select(ctrlnamess)
case_data <- exp.data.agg %>% select(casenamess)
casenamess <- c("GSM1695583_K255_PC.CEL", "GSM1695585_K360_PC.CEL", "GSM1695587_K400_PC.CEL",
"GSM1695589_K516_PC.CEL", "GSM1695591_K519_PC.CEL", "GSM1695593_K643_PC.CEL",
"GSM1695595_K661_PC.CEL", "GSM1695597_K796_PC.CEL", "GSM1695599_K815_PC.CEL",
"GSM1695601_K972_PC.CEL", "GSM1695603_L042_PC.CEL", "GSM1695605_L083_PC.CEL",
"GSM1695607_L128_PC.CEL", "GSM1695609_L184_PC.CEL", "GSM1695611_L187_PC.CEL")
case_data <- exp.data.agg %>% select(casenamess)
length(ctrlnamess)
length(casenamess)
new_order <- bind_cols(cotrl_data,case_data)
View(new_order)
exp.data.agg <- new_order
View(exp.data.agg)
View(exp.data)
#save the object in a RDATA file
save(exp.data.agg,file="Annotated_processed.RDATA")
write.table(exp.data.agg,file = "Annotated_processed.txt",row.names = T,col.names = T,quote = F)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- sampleNames(affyData)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Normal", 15),rep("Cancer", 15))
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- sampleNames(exp.data.agg)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- names(exp.data.agg)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Normal", 15),rep("Cancer", 15))
sampleInfo <- as.data.frame(bind_cols(samplnames,tissue))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="sample_source"
sampleInfo
corMatrix <- cor(exp.data.agg,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
corMatrix <- cor(exp.data.agg,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,annotation_col=sampleInfo)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
design <- model.matrix(~0+sampleInfo$sample_source)
design
## the column names are a bit ugly, so we will rename
colnames(design)
colnames(design) <- c("Cancer","Healthy")
#***Coping with outliers
#It is tempting to discard any arrays which seem to be outliers prior to differential expressions.
#However, this is done at the expense of sample-size which could be an issue for small experiments.
#A compromise, which has been shown to work well is to calculate **weights to define the reliability of each sample.
aw <- arrayWeights(exp.data.agg,design)
aw
fit <- lmFit(exp.data.agg, design,
weights = aw)
head(fit$coefficients)
View(fit)
contrasts <- makeContrasts(Cancer - Healthy,
Healthy - Cancer, levels=design)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- names(exp.data.agg)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Healthy", 15),rep("Cancer", 15))
sampleInfo <- as.data.frame(bind_cols(samplnames,tissue))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="sample_source"
corMatrix <- cor(exp.data.agg,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,annotation_col=sampleInfo)
sampleInfo
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(exp.data.agg)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Healthy", 15),rep("Cancer", 15))
sampleInfo <- as.data.frame(bind_cols(samplnames,tissue))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="sample_source"
corMatrix <- cor(exp.data.agg,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,annotation_col=sampleInfo)
sampleInfo
samplnames
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(exp.data.agg)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Healthy", 15),rep("Cancer", 15))
sampleInfo <- as.data.frame(bind_cols(samplnames,tissue))
View(sampleInfo)
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="sample_source"
sampleInfo
corMatrix <- cor(exp.data.agg,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,annotation_col=sampleInfo)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
head(fit2$coefficients)
P.values<-p.adjust(fit2$p.values,methods="fdr")
P.values<-p.adjust(fit2$p.values,methods="BH")
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit3), adjust.method="fdr", sort.by="none")
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr", sort.by="none")
View(top1)
View(fit2)
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="fdr", sort.by="none")
View(top2)
View(top1)
#If we want to know how many genes are differentially-expressed overall
#we can use the decideTests function.
table(decideTests(fit2))
#=======================[Exporting & Visualization Of DE results]================================
# select the Comparison items
full_results1 <- as.data.frame(top1) #Cancer-Healthy
View(full_results1)
colnames(full_results1)
## Add the ' ENTREZID ' Coz it will be needed in the Pathway analyses
mapper = hgu133plus2ENTREZID
mapper
## Add the ' ENTREZID ' Coz it will be needed in the Pathway analyses
mapper2 = hgu133plus2ENTREZID
mapper2
map.df2 = as.data.frame(mapper2)
head(map.df2)
# merge the two data frames to have the symbole annotation in the data object
names(procdata)[1]="SYMBOL"
# merge the two data frames to have the symbole annotation in the data object
names(top1)[1]="SYMBOL"
View(top1)
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr", sort.by="none")
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="fdr", sort.by="none")
View(top1)
p.adjust ("1.959629e-01", "5.754987e-01" , method="fdr")
p.adjust (1.959629e-01, 5.754987e-01 , method="fdr")
P_value <- c(1.959629e-01, 5.754987e-01)
p.adjust (P_values, method="fdr")
p.adjust (P_value, method="fdr")
P_value <- c(1.959629e-01, 5.754987e-01 ,1.098003e-06)
p.adjust (P_value, method="fdr")
p.adjust (P_value, method="HD")
p.adjust (P_value, method="BH")
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="BH", sort.by="none")
View(top1)
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="hommel", sort.by="none")
View(top1)
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="BH", sort.by="none")
P_value <- c(1.959629e-01, 5.754987e-01, 6.241358e-05)
p.adjust (P_value, method="fdr")
p.adjust(P_value, method="BH")
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="BH")
View(top1)
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="BH", sort.by="none")
P_value <- c(0.0001, 0.001, 0.006, 0.03, 0.095, 0.117,
0.234, 0.552, 0.751, 0.985)
p.adjust (P_value, method="bonferroni")
p.adjust (P_value, method="fdr")
p.adjust(top1$P.Value, method="BH")
head(p.adjust(top1$P.Value, method="BH"))
head(p.adjust(top1$P.Value, method="fdr"))
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr", BHsort.by="none")
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr",sort.by="none")
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="BH",sort.by="none")
write.table(top1,file = "GSE69223_stats.txt",row.names = T,col.names = T,quote = F)
write.table(top1,file = "GSE69223_stats.csv",row.names = T,col.names = T,quote = F)
#=======================[Exporting & Visualization Of DE results]================================
# select the Comparison items
full_results1 <- as.data.frame(top1) #Cancer-Healthy
colnames(full_results1)
processed_data <- full_results1
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$P.Value <= 0.05, ]
lenght(degs.res)
sum(degs.res)
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$adj.P.Val <= 0.05, ]
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$adj.P.Val <= 0.05, ]
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$adj.P.Val <= 0.05, ]
degs.res_UP=processed_data[processed_data$logFC >= 1   & processed_data$adj.P.Val <= 0.05,]
degs.res_DOWN=processed_data[processed_data$logFC  <= -1   & processed_data$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
res2 <- processed_data %>%
mutate(gene_type = case_when(logFC >= 1  & P.Value <= 0.05 ~ "up",
logFC <= -1  & P.Value <= 0.05 ~ "down",
TRUE ~ "ns"))
res2 <- processed_data %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(P.Value),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
degs.res2 <- read_delim("degs.res.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
degs.res2 <- read_delim("DEGs.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
View(degs.res2)
degs.res2 <- read.table("DEGs.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
degs.res2 <- read.table("DEGs.txt")
View(degs.res2)
degs.res2 <- read.table("DEGs.txt", row.names = F)
row.names(degs.res2) <- degs.res2[1]
row.names(degs.res2)
degs.res2[1] <- row.names(degs.res2)
View(degs.res2)
degs.res2 <- read.table("DEGs.txt")
degs.res2[7] <- row.names(degs.res2)
names(degs.res2)[7]="SYMBOL"
## Add the ' ENTREZID ' Coz it will be needed in the Pathway analyses
mapper2 = hgu133plus2ENTREZID
mapper2
map.df2 = as.data.frame(mapper2)
head(map.df2)
# merge the two data frames to have the symbole annotation in the data object
degs.res3 =merge(degs.res2,map.df2,by="SYMBOL",all.x=T)
mapper1 = hgu133plus2SYMBOL
mapper1
map.df1 = as.data.frame(mapper1)
head(map.df1)
# merge the two data frames to have the symbole annotation in the data object
degs.res3 =merge(degs.res2,map.df1,by="SYMBOL",all.x=T)
names(degs.res2)[7]="symbol"
# merge the two data frames to have the symbole annotation in the data object
degs.res3 =merge(degs.res2,map.df1,by="symbol",all.x=T)
View(degs.res3)
rownames(degs.res2)
cotrl_data <- hgu133plus2SYMBOL %>% select(rownames(degs.res2))
sympol_data <- map.df1 %>% select(rownames(degs.res2))
sympol_data <- map.df1$symbol %>% select(rownames(degs.res2))
map.df1[map.df1$symbol %in% rownames(degs.res2), ]
symbol <- map.df[map.df1$symbol %in% rownames(degs.res2), ]
mapper2 = hgu133plus2ENTREZID
mapper2
map.df2 = as.data.frame(mapper2)
head(map.df2)
head(map.df2)
Entrez_ID <- map.df2[map.df2$probe_id %in% symbol$probe_id, ]
View(Entrez_ID)
View(symbol)
symbol_EntrezID <- c(Entrez_ID$gene_id, symbol$symbol)
symbol_EntrezID <- bind_cols(Entrez_ID$gene_id, symbol$symbol)
View(symbol_EntrezID)
symbol_EntrezID <- unique(symbol_EntrezID)
symbol_EntrezID <- unique(bind_cols(Entrez_ID$gene_id, symbol$symbol))
View(degs.res)
symbol_EntrezID <- symbol_EntrezID[order(symbol_EntrezID$...2), ]
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
View(degs.res_IDs)
# check if name1 and name2 columns are the same
if (identical(row.names(degs.res_IDs), degs.res_IDs$...2)) {
print("The columns are the same.")
} else {
print("The columns are different.")
different_values <- which(df$name1 != df$name2)
print(paste("The different values are at rows:", different_values))
}
names(degs.res2)[1]="IDs"
names(degs.res_IDs)[1]="IDs"
View(degs.res_IDs)
degs.res_IDs=degs.res_IDs[,-2]
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
View(degs.res_IDs)
names(degs.res_IDs)[1]="IDs"
degs.res_IDs[,-2]
_IDs= degs.res_IDs[,-2]
IDs <- degs.res_IDs[,-2]
View(IDs)
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
names(degs.res_IDs)[1]="IDs"
degs.res_IDs <- degs.res_IDs[-2]
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
names(degs.res_IDs)[1]="IDs"
degs.res_IDs <- degs.res_IDs[-1]
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
# check if name1 and name2 columns are the same
if (identical(row.names(degs.res_IDs), degs.res_IDs$...2)) {
print("The columns are the same.")
} else {
print("The columns are different.")
different_values <- which(df$name1 != df$name2)
print(paste("The different values are at rows:", different_values))
}
names(degs.res_IDs)[1]="IDs"
names(degs.res_IDs)[1]="IDs"
names(degs.res_IDs)[2]="symbol"
write.table(degs.res_IDs,file = "DEGs[IDs&symbol].txt",row.names = F,col.names = T,quote = F)
degs.res2 <- read.table("DEGs.txt")
View(degs.res2)
degs.res2[7] <- row.names(degs.res2)
names(degs.res2)[7]="symbol"
degs.res2 <- read.table("DEGs.txt")
mapper1 = hgu133plus2SYMBOL
mapper1
map.df1 = as.data.frame(mapper1)
head(map.df1)
symbol <- map.df[map.df1$symbol %in% rownames(degs.res2), ]
mapper2 = hgu133plus2ENTREZID
mapper2
map.df2 = as.data.frame(mapper2)
head(map.df2)
Entrez_ID <- map.df2[map.df2$probe_id %in% symbol$probe_id, ]
symbol_EntrezID <- unique(bind_cols(Entrez_ID$gene_id, symbol$symbol))
symbol_EntrezID <- symbol_EntrezID[order(symbol_EntrezID$...2), ]
degs.res_IDs <- bind_cols(symbol_EntrezID,degs.res)
# check if name1 and name2 columns are the same
if (identical(row.names(degs.res_IDs), degs.res_IDs$...2)) {
print("The symbols are the same.")
} else {
print("The columns are different.")
different_values <- which(df$name1 != df$name2)
print(paste("The different values are at rows:", different_values))
}
names(degs.res_IDs)[1]="IDs"
names(degs.res_IDs)[2]="symbol"
write.table(degs.res_IDs,file = "DEGs[IDs&symbol].txt",row.names = F,col.names = T,quote = F)
write.table(rownames(degs.res_IDs),file = "DEGs[symbol]",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_IDs),file = "DEGs[names].txt",row.names = F,col.names = F,quote = F)
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(hgu133a2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
res2 <- processed_data %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
