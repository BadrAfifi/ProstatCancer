# Create ExpressionSet object
eset <- ExpressionSet(assayData = exprs(affyData),
phenoData = AnnotatedDataFrame(affyData),
featureData = AnnotatedDataFrame(featureNames(affyData)
))
load("F:/DGE/PCs[DGEs]/GSE30994/.RData")
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
library(readr)
library(GEOquery)
library(hgu133plus2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
pData(gse2) ## print the sample information
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Normal", 3),rep("Cancer", 3))
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(expdata)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
tissue <- c(rep("Normal", 3),rep("Cancer", 3))
sampleInfo <- as.data.frame(bind_cols(samplnames,tissue))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="sample_source"
corMatrix <- cor(expdata,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
{
#*** Exporting the data
features <- fData(gse2)
View(features)
colnames(features)
### Look at the features data frame and decide the names of the columns you want to keep
features <- select(features,"Gene Symbol","Gene Title")
full_output <- cbind(features,exprs(gse2))
write_csv(full_output, path="gse_full_output.csv")
}
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
design <- model.matrix(~0+sampleInfo$sample_source)
design
## the column names are a bit ugly, so we will rename
colnames(design)
colnames(design) <-  c("Cancer","Healthy")
sampleInfo
sampleInfo[,"sample_source"]
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"])
batch
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
pca
sampleInfo[,"sample_source"]
sampleInfo
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"],
covariates = sampleInfo[,"sample_names "])
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"],
covariates = sampleInfo[,"sample_names"])
load("F:/DGE/PCs[DGEs]/GSE32571/.RData")
gse <- getGEO(my_id)
gse2
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2)),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
#***For your own data, you will have to decide which columns will be useful in the analysis
sampleInfo <- pData(gse2)
colnames(sampleInfo)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
sampleInfo <- select(sampleInfo, "disease stage:ch1")
head(sampleInfo)
## Optionally, rename to more convenient column names
sampleInfo <- rename(sampleInfo, Condition = "disease stage:ch1")
corMatrix <- cor(expdata,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
library(readr)
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
pheatmap(corMatrix,
annotation_col=sampleInfo)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2)),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"])
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"disease stage:ch1"])
sampleInfo
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"Condition"])
batch <- removeBatchEffect(exprs(gse2), batch = sampleInfo[,"Condition"])
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),scale=TRUE)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),scale=FALSE)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),scale=TRUE)
load("F:/DGE/PCs[DGEs]/GSE46602/.RData")
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(hgu133a2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"])
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"])
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
samplnames
colnames(eset)
colnames(eset)
colnames(pData(affyData))
sampleNames(affyData)
featureNames(affyData)
pData(affyData)
phenoData(affyData)
colnames(phenoData(affyData))
sampleInfo[,"sample_source"]
sampleInfo
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"],
covariates = sampleInfo[,"sample_names "])
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"],
covariates = sampleInfo[,"sample_names"])
design
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"],
design = design)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
dds1 <- estimateSizeFactors(exp.data.agg)
design
sampleInfo[,"sample_source"]
batch <- removeBatchEffect(exp.data.agg, batch = design,
design = design)
dds1 <- estimateSizeFactors(exp.data.agg)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
load("F:/DGE/PCs[DGEs]/GSE69223/.RData")
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(hgu133a2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
load("F:/DGE/PCs[DGEs]/GSE103512/.RData")
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(hgu133a2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
design <- model.matrix(~0+sampleInfo$sample_source)
design
colnames(design) <- c("Cancer","Healthy")
sampleInfo
batch <- removeBatchEffect(expdata, batch = sampleInfo[,"sample_source"], design = design)
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"], design = design)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"])
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
batch <- removeBatchEffect(exp.data.agg, design = design)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(batch),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
design
sampleInfo
desgin2 <- cbind(sampleInfo$sample_names, design)
desgin2
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"], design = desgin2)
rownames(desgin) <- sampleInfo$sample_names
design
rownames(desgin)
colnames(desgin) <- sampleInfo$sample_names
desgin2 <- desgin
design <- model.matrix(~0+sampleInfo$sample_source)
design
desgin2 <- desgin
rownames(desgin) <- sampleInfo$sample_names
design0 <- model.matrix(~0+sampleInfo$sample_source)
design0
desgin2 <- desgin0
design0 <- model.matrix(~0+sampleInfo$sample_source, sampleInfo$sample_names)
design0 <- model.matrix(~0+sampleInfo$sample_source,sampleInfo$sample_names+0)
design0 <- model.matrix(~0+sampleInfo$sample_source,sampleInfo$sample_names)
design0 <- model.matrix(~sampleInfo$sample_source,sampleInfo$sample_names)
design0 <- model.matrix(~sampleInfo$sample_source)
design0
batch <- removeBatchEffect(exp.data.agg, batch = sampleInfo[,"sample_source"], design = design0)
load("E:/DGE/PCs[DGEs]/GSE103512/.RData")
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(hgu133a2.db)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
BiocManager::install(c("GSEABase", "GOstats", "genefilter"))
library(limma)
library(GEOquery)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(genefilter)
library(multtest)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
BiocManager::install("multtest")
library(multtest)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exp.data.agg),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
mod1 = model.matrix(~Cancer, data=sampleInfo)
sampleInfo
mod1 = model.matrix(~ Cancer, data=sampleInfo)
mod1 = model.matrix(~ sample_names, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
mod1
mod0
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
BiocManager::install("sva")
library(sva)
mod1 = model.matrix(~ sample_names, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
sampleInfo
tissue
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer,Healthy))
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(exp.data.agg)
Cancer <- c(rep("1", 60),rep("0", 7))
Healthy <- c(rep("0", 60),rep("1", 7))
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer,Healthy))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="Cancer"
names(sampleInfo)[3]="Healthy"
sampleInfo
mod1 = model.matrix(~ sample_names, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
mod1 = model.matrix(~Cancer, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
mod0 = model.matrix(~Healthy ,data=sampleInfo )
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
mod1
mod0
mod1
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
Cancer <- c(rep("Cancer", 60),rep("Healthy", 7))
Healthy <- c(rep("Healthy", 60),rep("Cancer", 7))
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer,Healthy))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="Cancer"
names(sampleInfo)[3]="Healthy"
sampleInfo
mod1 = model.matrix(~Cancer, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
sva1 = sva(exp.data.agg, mod1, mod0, n.sv= 2)
exp.data.agg
sva1 = sva(exprs(affyData), mod1, mod0, n.sv= 2)
sva1
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer,Healthy))
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="Cancer"
mod1 = model.matrix(~Cancer, data=sampleInfo)
mod0 = model.matrix(~1 ,data=sampleInfo )
sva1 = sva(exprs(affyData), mod1, mod0, n.sv= 2)
dim(sva1$sv)
sva1$sv
design <- model.matrix(~0+sampleInfo$sample_source)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(exp.data.agg)
sampleInfo <- as.data.frame(bind_cols(samplnames,Cancer))
names(sampleInfo)[1]="sample_names"
names(sampleInfo)[2]="Cancer"
names(sampleInfo)[2]="sample_source"
names(sampleInfo)[2]="Cancer"
sampleInfo
design <- model.matrix(~0+sampleInfo$Cancer)
design
design <- model.matrix(~0+sampleInfo$Cancer)
design
modsv = cbind(design, sva1$sv )
modsv
design
fitsv= lm.fit(modsv, t(exprs(affyData)))
fitsv
boxplot(sva1$sv)
dim(sva1$sv[,2])
boxplot(sva1$sv[,2])
boxplot(sva1$sv)
fit <- lmFit(exp.data.agg, modsv,
weights = aw)
head(fit$coefficients)
## Join the PCs to the sample information
cbind(modsv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
pca <- prcomp(t(exprs(affyData)),)
sva1$sv
## Join the PCs to the sample information
cbind(sva1$sv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
## Join the PCs to the sample information
cbind(sva1$sv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source)) + geom_point()
sampleInfo
modsv = cbind(sampleInfo, sva1$sv )
## Join the PCs to the sample information
cbind(modsv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
## Join the PCs to the sample information
cbind(modsv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source))
modsv
## Join the PCs to the sample information
cbind(modsv, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col= Cancer ,label=paste("sample_source", Cancer))) + geom_point()
