setwd("F:/DGE/PCs[DGEs]/New folder")
library(readr)
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
my_id <- "GSE32571"
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
gse2 <- gse[[1]]
gse2
pData(gse2) ## print the sample information
fData(gse2) ## print the gene annotation
exprs(gse2) ## print the expression data
pData(gse2)$data_processing[1] #Check the normalisation
## exprs get the expression levels as a data frame and get the distribution
summary(exprs(gse2))
boxplot(exprs(gse2),outline=FALSE,main = "Box Plot [GSE30994]",col=seq(1:23))
boxplot(exprs(gse2),outline=FALSE,main = "Box Plot [GSE32571]",col=seq(1:23))
expdata <- exprs(gse2)
#***For your own data, you will have to decide which columns will be useful in the analysis
samplnames <- colnames(expdata)
samplnames
#***For your own data, you will have to decide which columns will be useful in the analysis
sampleInfo <- pData(gse2)
colnames(sampleInfo)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
sampleInfo <- select(sampleInfo, disease stage:ch1)
## source_name_ch1 seems to contain factors we might need for the analysis. Let's pick just those columns
sampleInfo <- select(sampleInfo, "disease stage:ch1")
head(sampleInfo)
## Optionally, rename to more convenient column names
sampleInfo <- rename(sampleInfo, Condition = "disease stage:ch1")
sampleInfo
corMatrix <- cor(expdata,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=sample_source,label=paste("sample_source", sample_source))) + geom_point()
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col="disease stage:ch1",label=paste("sample_source", "disease stage:ch1"))) + geom_point()
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(expdata),)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2),)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2)),)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2)),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse2)),)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(exprs(gse2),)
design <- model.matrix(~0+sampleInfo$sample_source)
sampleInfo
design <- model.matrix(~0+sampleInfo$Condition)
design
## the column names are a bit ugly, so we will rename
colnames(design)
colnames(design) <-  c("Healthy","Cancer")
design
#***Coping with outliers
#It is tempting to discard any arrays which seem to be outliers prior to differential expressions.
#However, this is done at the expense of sample-size which could be an issue for small experiments.
#A compromise, which has been shown to work well is to calculate **weights to define the reliability of each sample.
aw <- arrayWeights(expdata,design)
aw
fit <- lmFit(expdata, design,
weights = aw)
head(fit$coefficients)
contrasts <- makeContrasts(Cancer - Healthy,
Healthy - Cancer, levels=design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
head(fit2$coefficients)
topTable(fit2, coef=1) ## topTable(fit2, coef=2)
#If we want to know how many genes are differentially-expressed overall
#we can use the decideTests function.
table(decideTests(fit2))
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number= nrow(fit2), adjust.method="fdr",sort.by="none")
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="BH",sort.by="none")
anno <- fData(gse2)
colnames(anno)
anno <- fData(gse2)
colnames(anno)
top1[7] <- select(anno,"Entrez_Gene_ID")
top1[8] <- select(anno,"Symbol")
View(top1)
head(anno$ID)
# [1] select the Comparison items
full_results1 <- as.data.frame(top1) #Hep3B_ATAD2 - Hep3B_control
# [2] Save the the comparison statistic results
write.table(full_results1, file="statistic_results.txt", sep="\t", row.names=T, col.names=NA)
stat_data <- read_delim("statistic_results.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
# [3] do i need the probe id again?  no, then let's drop it
stat_data=stat_data[,-1]
View(stat_data)
# [4] remove nulls : some probes were not mapped to any gene symbol
full_results1 = stat_data[ ! is.na(stat_data$Symbol),]
#[5] check duplciation of of gene symbols?
x=duplicated(full_results1$Symbol)
sum(x)
#[6] ### yes .. why ? probesets?  solutions : aggregation
exp.data=full_results1[-dim(full_results1)[2]]
exp.data=apply(full_results1,2, as.numeric)
# [7] #### remove duplication
exp.data.agg= aggregate(exp.data, list(full_results1$GENE_SYMBOL),FUN=mean)
# [7] #### remove duplication
exp.data.agg= aggregate(exp.data, list(full_results1$Symbol),FUN=mean)
names(exp.data.agg)
# [8] rename the row name -> Gene Symbol
rownames(exp.data.agg)=exp.data.agg$Group.1
View(exp.data.agg)
exp.data.agg=exp.data.agg[,c(-1,-9)]
# [9]
processed_data <- exp.data.agg
write.table(processed_data,file = "GSE69223_stats.txt",row.names = T,col.names = T,quote = F)
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$adj.P.Val <= 0.05, ]
degs.res_UP=processed_data[processed_data$logFC >= 1   & processed_data$adj.P.Val <= 0.05,]
degs.res_DOWN=processed_data[processed_data$logFC  <= -1   & processed_data$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs[ID&names].txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res),file = "DEGs.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- processed_data %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
library(readr)
library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    #
## check how many platforms used
length(gse)
gse2 <- gse[[1]]
gse2
pData(gse2) ## print the sample information
fData(gse2) ## print the gene annotation
exprs(gse2) ## print the expression data
corMatrix <- cor(expdata,use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
